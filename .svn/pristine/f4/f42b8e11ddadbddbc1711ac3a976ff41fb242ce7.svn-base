/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.claim.controller;

import com.claim.connection.DBManage;
import com.claim.connection.ResourcesProperties;
import com.claim.dao.FileTransferDao;
import com.claim.object.FtpProperties;
import com.claim.object.ObjFileTransfer;
import com.claim.support.Console;
import com.claim.support.FtpUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;

/**
 *
 * @author POOL_LAPTOP
 */
public class FileTransferController {

    private String FTP_SERVER = null;
    private int FTP_PORT;
    private String FTP_USER = null;
    private String FTP_PASS = null;
    private String FTP_REMOTE_DIRECTORY = null;
    private String FTP_REMOTE_HOME = null;

    static Properties props;

    public FileTransferController() {
        FtpProperties properties = new ResourcesProperties().loadFTPProperties();
        System.out.println("properties ::==" + properties);
        FTP_SERVER = properties.getFtp_server();
        FTP_PORT = Integer.parseInt(properties.getFtp_port());
        FTP_USER = properties.getFtp_username();
        FTP_PASS = properties.getFtp_password();
        FTP_REMOTE_DIRECTORY = properties.getFtp_remote_directory();
    }

    public static void main(String[] args) {
        FileTransferController ftc = new FileTransferController();
        //ftc.uploadSingleFileWithFTP(LOCAL_FILE);
        //ftc.uploadMutiFiles(LOCAL_DIRECTORY);
        ftc.readFilesFromServer(ftc.FTP_REMOTE_DIRECTORY);
    }


    public void readFilesFromServer(String targetDirectory) {
        FTPClient ftpClient = new FTPClient();
        try {

            ftpClient.connect(FTP_SERVER, FTP_PORT);
            ftpClient.login(FTP_USER, FTP_PASS);
            ftpClient.enterLocalPassiveMode();

            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);

            //FTP_REMOTE_HOME = ftpClient.printWorkingDirectory();
            

            FTPFile[] ftpFiles = ftpClient.listFiles();

            if (ftpFiles != null && ftpFiles.length > 0) {
                //loop thru files
                for (FTPFile file : ftpFiles) {
                    if (!file.isFile()) {
                        continue;
                    }
                    System.out.println("File is " + file.getName());

                    //get output stream
                    OutputStream output;
                    //output = new FileOutputStream(FTP_REMOTE_HOME + "/" + file.getName());
                    output = new FileOutputStream(file.getName());
                    //get the file from the remote system
                    ftpClient.retrieveFile(file.getName(), output);
                    //close output stream
                    output.close();

                    //delete the file
                    //ftpClient.deleteFile(file.getName());
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (ftpClient != null) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                Logger.getLogger(FileTransferController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public List<ObjFileTransfer> getFileTransfer(String reportType) {
        Connection connection = null;
        List<ObjFileTransfer> listFtps = new ArrayList<>();
        try {
            connection = new DBManage().open();
            FileTransferDao ftpDao = new FileTransferDao();
            ftpDao.setConnection(connection);

            listFtps = ftpDao.readFileList(reportType);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ex) {
                    Logger.getLogger(InitProgramController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return listFtps;
    }

    public boolean uploadMutiFiles(ObjFileTransfer ftpObj) throws Exception {
        FTPClient ftpClient = new FTPClient();
        int replyCode;
        boolean completed = false;
        try {

            ftpClient.connect(FTP_SERVER, FTP_PORT);

            replyCode = ftpClient.getReplyCode();

            if (!FTPReply.isPositiveCompletion(replyCode)) {
                ftpClient.disconnect();
                Console.LOG("Exception in connecting to FTP Serve ", 0);
                throw new Exception("Exception in connecting to FTP Server");
            }

            ftpClient.login(FTP_USER, FTP_PASS);
            ftpClient.enterLocalPassiveMode();

            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
            //FTP_REMOTE_HOME = ftpClient.printWorkingDirectory();

            // APPROACH #2: uploads second file using an OutputStream
            File files = new File(ftpObj.getFtp_directory_path());

            String workingDirectoryReportType = FTP_REMOTE_DIRECTORY + File.separator + ftpObj.getFtp_report_type();
            FtpUtil.ftpCreateDirectoryTree(ftpClient, workingDirectoryReportType);

            String workingDirectoryStmp = workingDirectoryReportType + File.separator + ftpObj.getFtp_stmp();
            FtpUtil.ftpCreateDirectoryTree(ftpClient, workingDirectoryStmp);

            for (File file : files.listFiles()) {
                if (file.isFile()) {
                    System.out.println("file ::" + file.getName());
                    InputStream in = new FileInputStream(file);
                    ftpClient.changeWorkingDirectory(workingDirectoryStmp);
                    completed = ftpClient.storeFile(file.getName(), in);
                    in.close();
                    Console.LOG(" อัพโหลดไฟล์ " + file.getName() + " เรียบร้อย", 1);
                }
            }
            Console.LOG(" กำลังตรวจสอบ... ", 1);

            //completed = ftpClient.completePendingCommand();
            completed = true;
            ftpClient.disconnect();

        } catch (IOException ex) {
            System.out.println("Error: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        return completed;
    }


    public int createLogFileTransfer(ObjFileTransfer ftpObj) {
        Connection connection = null;
        int exec = 0;
        try {
            connection = new DBManage().open();
            FileTransferDao ftpDao = new FileTransferDao();
            ftpDao.setConnection(connection);

            exec = ftpDao.createLog(ftpObj);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.commit();
                    connection.close();
                } catch (SQLException ex) {
                    Logger.getLogger(InitProgramController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return exec;
    }

}
