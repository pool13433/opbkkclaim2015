/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.claim.controller;

import com.claim.connection.DBManage;
import com.claim.dao.ThaiMedicineDao;
import com.claim.object.HospitalService;
import com.claim.object.Obj_thaimedicine_act;
import com.claim.object.Obj_thaimedicine_mom;
import com.claim.object.OppReport;
import com.claim.support.Console;
import com.claim.support.Constants;
import com.claim.support.DateUtil;
import com.claim.support.FileUtil;
import com.claim.support.ProgrameStatus;
import com.claim.support.StringOpUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;

/**
 *
 * @author Poolsawat
 */
public class ThaiMedicineController extends ExcellBaseUtil {

    //############# POI ###############
    FileInputStream file = null;
    FileOutputStream out = null;
    HSSFCell cell = null;
    HSSFRow row = null;
    //############# POI ###############

    //############# JDBC ###############
    Connection connection = null;
    //############# JDBC ###############

    //############# Variable ###############
    String EXCELL_HEADER1 = null;
    String EXCELL_HEADER2 = null;
    String EXCELL_HOSPITAL = null;
    String Budget_Year = "รวม 2014 และ 2015";

    public static String HEADER_DETAIL_ACT = "รายงานรายละเอียดกิจกรรมนวด ประคบสมุนไพร อบสมุนไพร และจ่ายยาสมุนไพร";
    public static String HEADER_DETAIL_MOM = "รายงานรายละเอียดกิจกรรมบริการมารดาหลังคลอด";
    public static String HEADER_SUM_ACT = "รายงานสรุปกิจกรรมนวด ประคบสมุนไพร อบสมุนไพร และจ่ายยาสมุนไพร";
    public static String HEADER_SUM_MOM = "รายงานสรุปกิจกรรมบริการมารดาหลังคลอด";

    public ProgrameStatus tmdActDetail(OppReport report) {
        int col_last = 12;
        int row_start = 6; // index row
        int row_formula_start = 7;
        ProgrameStatus programeStatus = new ProgrameStatus();
        List<Obj_thaimedicine_act> listData = new ArrayList<Obj_thaimedicine_act>();

        String stmp = StringOpUtil.removeNull(report.getYearMonth()) + "-" + report.getNo();
        String pathDirectory = report.getPathFile() + "\\thaimedicine\\" + stmp + "\\";
        try {
            connection = new DBManage().open();
            ThaiMedicineDao tmdDao = new ThaiMedicineDao();
            tmdDao.setConnection(connection);

            //readTemplate 
            file = new FileInputStream(new File(".\\xls\\THAIMEDICINE_detail.xls"));

            //EXCELL_HEADER1 = "รายละเอียดการจ่ายชดเชยค่าบริการ  กรณีกึ่งผู้ป่วยนอกกึ่งผู้ป่วยใน (THAIMEDICINE)  ปีงบประมาณ 2557";
            EXCELL_HEADER1 = report.getTitle1();
            /*if (report.getBudget_year().equals("2014")) {
             EXCELL_HEADER2 = "งวดที่ 01 (ล่าช้า)";
             } else {
             EXCELL_HEADER2 = "งวดที่ " + new DateUtil().convertStmpToString(report.getStmp());
             }*/
            EXCELL_HEADER2 = new DateUtil().convertStmpToString(report.getStmp());
            EXCELL_HOSPITAL = "หน่วยบริการ: " + StringOpUtil.removeNull(report.getServiceName()) + " (" + StringOpUtil.removeNull(report.getServiceCode()) + ")";

            // style Excell
            HSSFWorkbook wbTmd = new HSSFWorkbook(file);
            this.loadStyle(wbTmd);

            // Start sheet 1 
            HSSFSheet sheet = wb.getSheetAt(0);
            sheet.createFreezePane(5, row_start); // col[F],row[index 6 = 7]
            sheet.setColumnWidth((col_last + 1), WIDTH_TXID);

            // row 0 HEADER0
            row = sheet.createRow(0);
            row.setHeight((short) 390);
            cell = row.createCell(0);
            cell.setCellValue(EXCELL_HEADER1);
            sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, col_last));
            cell.setCellStyle(csHead);

            // row 1 HEADER2
            row = sheet.createRow(1);
            row.setHeight((short) 390);
            cell = row.createCell(0);
            cell.setCellValue(EXCELL_HEADER2);
            sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, col_last));
            cell.setCellStyle(csHead);

            // row 1 HOSPITAL
            row = sheet.createRow(2);
            row.setHeight((short) 390);
            cell = row.createCell(0);
            cell.setCellValue(EXCELL_HOSPITAL);
            sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, col_last));
            cell.setCellStyle(csHead);

            int curRow = row_start;
            int i = 1;

            listData = tmdDao.getListTmdAct(report);
            for (int j = 0; j < listData.size(); j++) {
                Obj_thaimedicine_act data = listData.get(j);
                int col1 = i;

                row = sheet.createRow(curRow);
                row.setHeight((short) 340);

                /*PoiHssfUtil stylePoi = new PoiHssfUtil(wb, row, cell);
                 stylePoi.setStyleText(0, String.valueOf(col1), PoiHssfUtil.CENTER);*/
                cell = row.createCell(0);
                cell.setCellValue(col1);
                cell.setCellStyle(csNum4);

                /*
                
                 ใส่ columns filed
                
                 */
                curRow++;
                i++;
            }

            // สรุป
            row = sheet.createRow(curRow);
            cell = row.createCell(0);
            cell.setCellValue("รวม");
            sheet.addMergedRegion(new CellRangeAddress(curRow, curRow, 0, 6));
            cell.setCellStyle(csNum4B);

            cell = row.createCell(1);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(2);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(3);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(4);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(5);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(6);
            cell.setCellStyle(csNum4B);

            cell = row.createCell(7);
            cell.setCellFormula("SUM(H" + String.valueOf(row_formula_start) + ":H" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(8);
            cell.setCellFormula("SUM(I" + String.valueOf(row_formula_start) + ":I" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(9);
            cell.setCellFormula("SUM(J" + String.valueOf(row_formula_start) + ":J" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(10);
            cell.setCellFormula("SUM(K" + String.valueOf(row_formula_start) + ":K" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(11);
            cell.setCellFormula("SUM(L" + String.valueOf(row_formula_start) + ":L" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(12);
            cell.setCellFormula("SUM(M" + String.valueOf(row_formula_start) + ":M" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(13);
            cell.setCellStyle(csNum2B);

            wb.setSheetName(0, report.getServiceCode());// + "  " + report.getServiceName());
            /// int sheetIndex, int startColumn, int endColumn, int startRow, int endRow)                    
            sheet.setColumnHidden(13, true);
            wb.setPrintArea(0, "$A$1:$M$" + (curRow + 1));
            // file out 
            // ############# mkdir ############          
            pathDirectory = new FileUtil().mkdirDir(pathDirectory, report.getBudget_year(), "tmd_act");
            // ############# mkdir ############            
            out = new FileOutputStream(pathDirectory + "\\thaimedicine_" + StringOpUtil.removeNull(report.getServiceCode()) + "_" + report.getStmp() + ".xls");
            wb.write(out);

            out.close();
            file.close();

            Console.LOG("ออกรายงาน " + report.getServiceName() + " งวด: " + report.getYearMonth() + "-" + report.getNo() + " เรียบร้อยแล้วครับ", 1);
            programeStatus.setMessage(Constants.MSG_REPORT_SUCCESS);
            programeStatus.setTitle(Constants.MSG_REPORT_COMPLETE);
            programeStatus.setProcessStatus(true);

        } catch (Exception e) {
            e.printStackTrace();
            Console.LOG(e.getMessage(), 0);
            programeStatus.setMessage(Constants.MSG_PROCESS_FAILS + e.toString());
            programeStatus.setTitle(Constants.MSG_CONTACT_ADMIN);
            programeStatus.setProcessStatus(false);
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return programeStatus;
    }

    public ProgrameStatus tmdMomDetail(OppReport report) {
        int col_last = 12;
        int row_start = 6; // index row
        int row_formula_start = 7;
        ProgrameStatus programeStatus = new ProgrameStatus();
        List<Obj_thaimedicine_mom> listData = new ArrayList<Obj_thaimedicine_mom>();

        String stmp = StringOpUtil.removeNull(report.getYearMonth()) + "-" + report.getNo();
        String pathDirectory = report.getPathFile() + "\\thaimedicine\\" + stmp + "\\";
        try {
            connection = new DBManage().open();

            ThaiMedicineDao tmdDao = new ThaiMedicineDao();
            tmdDao.setConnection(connection);

            //readTemplate 
            file = new FileInputStream(new File(".\\xls\\THAIMEDICINE_detail.xls"));

            //EXCELL_HEADER1 = "รายละเอียดการจ่ายชดเชยค่าบริการ  กรณีกึ่งผู้ป่วยนอกกึ่งผู้ป่วยใน (THAIMEDICINE)  ปีงบประมาณ 2557";
            EXCELL_HEADER1 = report.getTitle1();
            /*if (report.getBudget_year().equals("2014")) {
             EXCELL_HEADER2 = "งวดที่ 01 (ล่าช้า)";
             } else {
             EXCELL_HEADER2 = "งวดที่ " + new DateUtil().convertStmpToString(report.getStmp());
             }*/
            EXCELL_HEADER2 = new DateUtil().convertStmpToString(report.getStmp());
            EXCELL_HOSPITAL = "หน่วยบริการ: " + StringOpUtil.removeNull(report.getServiceName()) + " (" + StringOpUtil.removeNull(report.getServiceCode()) + ")";

            // style Excell
            HSSFWorkbook wbTmd = new HSSFWorkbook(file);
            this.loadStyle(wbTmd);

            // Start sheet 1 
            HSSFSheet sheet = wb.getSheetAt(0);
            sheet.createFreezePane(5, row_start); // col[F],row[index 6 = 7]
            sheet.setColumnWidth((col_last + 1), WIDTH_TXID);

            // row 0 HEADER0
            row = sheet.createRow(0);
            row.setHeight((short) 390);
            cell = row.createCell(0);
            cell.setCellValue(EXCELL_HEADER1);
            sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, col_last));
            cell.setCellStyle(csHead);

            // row 1 HEADER2
            row = sheet.createRow(1);
            row.setHeight((short) 390);
            cell = row.createCell(0);
            cell.setCellValue(EXCELL_HEADER2);
            sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, col_last));
            cell.setCellStyle(csHead);

            // row 1 HOSPITAL
            row = sheet.createRow(2);
            row.setHeight((short) 390);
            cell = row.createCell(0);
            cell.setCellValue(EXCELL_HOSPITAL);
            sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, col_last));
            cell.setCellStyle(csHead);

            int curRow = row_start;
            int i = 1;

            listData = tmdDao.getListTmdMom(report);
            for (int j = 0; j < listData.size(); j++) {
                Obj_thaimedicine_mom data = listData.get(j);
                int col1 = i;

                row = sheet.createRow(curRow);
                row.setHeight((short) 340);

                /*PoiHssfUtil stylePoi = new PoiHssfUtil(wb, row, cell);
                 stylePoi.setStyleText(0, String.valueOf(col1), PoiHssfUtil.CENTER);*/
                cell = row.createCell(0);
                cell.setCellValue(col1);
                cell.setCellStyle(csNum4);

                /*
                
                 ใส่ columns filed
                
                 */
                curRow++;
                i++;
            }

            // สรุป
            row = sheet.createRow(curRow);
            cell = row.createCell(0);
            cell.setCellValue("รวม");
            sheet.addMergedRegion(new CellRangeAddress(curRow, curRow, 0, 6));
            cell.setCellStyle(csNum4B);

            cell = row.createCell(1);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(2);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(3);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(4);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(5);
            cell.setCellStyle(csNum4B);
            cell = row.createCell(6);
            cell.setCellStyle(csNum4B);

            cell = row.createCell(7);
            cell.setCellFormula("SUM(H" + String.valueOf(row_formula_start) + ":H" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(8);
            cell.setCellFormula("SUM(I" + String.valueOf(row_formula_start) + ":I" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(9);
            cell.setCellFormula("SUM(J" + String.valueOf(row_formula_start) + ":J" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(10);
            cell.setCellFormula("SUM(K" + String.valueOf(row_formula_start) + ":K" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(11);
            cell.setCellFormula("SUM(L" + String.valueOf(row_formula_start) + ":L" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(12);
            cell.setCellFormula("SUM(M" + String.valueOf(row_formula_start) + ":M" + (curRow) + ")");
            cell.setCellStyle(csNum2B);

            cell = row.createCell(13);
            cell.setCellStyle(csNum2B);

            wb.setSheetName(0, report.getServiceCode());// + "  " + report.getServiceName());
            /// int sheetIndex, int startColumn, int endColumn, int startRow, int endRow)                    
            sheet.setColumnHidden(13, true);
            wb.setPrintArea(0, "$A$1:$M$" + (curRow + 1));
            // file out 
            // ############# mkdir ############          
            pathDirectory = new FileUtil().mkdirDir(pathDirectory, report.getBudget_year(), "tmd_act");
            // ############# mkdir ############            
            out = new FileOutputStream(pathDirectory + "\\thaimedicine_" + StringOpUtil.removeNull(report.getServiceCode()) + "_" + report.getStmp() + ".xls");
            wb.write(out);

            out.close();
            file.close();

            Console.LOG("ออกรายงาน " + report.getServiceName() + " งวด: " + report.getYearMonth() + "-" + report.getNo() + " เรียบร้อยแล้วครับ", 1);
            programeStatus.setMessage(Constants.MSG_REPORT_SUCCESS);
            programeStatus.setTitle(Constants.MSG_REPORT_COMPLETE);
            programeStatus.setProcessStatus(true);

        } catch (Exception e) {
            e.printStackTrace();
            Console.LOG(e.getMessage(), 0);
            programeStatus.setMessage(Constants.MSG_PROCESS_FAILS + e.toString());
            programeStatus.setTitle(Constants.MSG_CONTACT_ADMIN);
            programeStatus.setProcessStatus(false);
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return programeStatus;
    }

    public void tmdActSummary() {
        try {

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public void tmdMomSummary() {
        try {

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public ProgrameStatus TmdDetail_ByHcode(OppReport report) {
        ProgrameStatus programeStatus = new ProgrameStatus();
        List<HospitalService> listData = new ArrayList<>();
        try {
            connection = new DBManage().open();
            ThaiMedicineDao thaiMedicineDao = new ThaiMedicineDao();
            thaiMedicineDao.setConnection(connection); // connection = new DBManage().open();
            listData = thaiMedicineDao.getHospitalService(report);

            for (int i = 0; i < listData.size(); i++) {
                HospitalService objData = listData.get(i);
                report.setServiceCode(objData.getHosCode());
                report.setServiceName(objData.getHosName());
                /*
                 public static String HEADER_SUM_ACT = "รายงานสรุปกิจกรรมนวด ประคบสมุนไพร อบสมุนไพร และจ่ายยาสมุนไพร";
                 public static String HEADER_SUM_MOM = "รายงานสรุปกิจกรรมบริการมารดาหลังคลอด";
                 */
                if (report.getTmdServiceType().equals(Constants.TMD_ACT)) { // กิจกรรมนวด ประคบสมุนไพร อบสมุนไพร และจ่ายยาสมุนไพร
                    programeStatus = tmdActDetail(report);
                } else {  //กิจกรรมบริการมารดาหลังคลอด
                    programeStatus = tmdMomDetail(report);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return programeStatus;
    }

    public ProgrameStatus tmd_genReportAllFunction(OppReport report) {
        ProgrameStatus programeStatus = new ProgrameStatus();
        try {

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return programeStatus;
    }
}
